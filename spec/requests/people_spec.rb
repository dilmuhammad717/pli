# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/people', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Person. As you add validations to Person, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      first_name: 'Dil', last_name: 'Muhammad', nickname: 'DM', phone: '111-222-3333',
      street: 'Street #1', city: 'Lahore', state: 'Punjab', zip: '5400',
      email: 'dilmuhammad717@gmail.com'
    }
  end

  let(:invalid_attributes) do
    {
      first_name: 'testing first wrong name with length greater than 25', last_name: 'Muhammad',
      nickname: 'DM', phone: '111-222-33',
      street: 'Street #1', city: 'Lahore', state: 'Punjab', zip: '5400',
      email: 'dilmuhammad717@gmail.com'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Person.create! valid_attributes
      get people_url
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_person_url
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Person' do
        expect do
          post people_url, params: { person: valid_attributes }
        end.to change(Person, :count).by(1)
      end

      it 'redirects to the created person' do
        post people_url, params: { person: valid_attributes }
        # expect(response).to redirect_to(person_url(Person.last))
        expect(response).to redirect_to(root_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Person' do
        expect do
          post people_url, params: { person: invalid_attributes }
        end.to change(Person, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post people_url, params: { person: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
